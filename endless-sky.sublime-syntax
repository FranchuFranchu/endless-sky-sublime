%YAML 1.2
---
name: Endless Sky
file_extensions:
  - txt
scope: source.endless-sky

contexts:
  main:
    - match: '(to|on|not|neighbour)'
      comment: This are multiple-words keywords, such as "to offer", or "on complete"
      scope: entity.name.endless-sky
    - match: 'npc'
      scope: entity.name.endless-sky
      push:
        - meta_scope: support.type.endless-sky
        - match: '$'
          pop: true
    - match: '^\w+'
      comment: Expect a value
      scope: support.type.endless-sky
      push: value
    - match: '\w+'
      scope: entity.name.endless-sky
      push: value
    - match: '^\s+(["`])?.{0,}?\1[^\n]'
      scope: entity.name.endless-sky
      push: value
    - include: comments
    - include: string_detection

  string_detection:
    - match: ' ?"'
      push: string
    - match: ' ?`'
      push: bstring

  value:
    - include: string_detection
    - match: ' ?(\+\+|--|==?|[+-]=|[<>])'
      comment: Increment, decrement or comparison
      scope: keyword.control.endless-sky
    - match: ' ?([-])?[0-9.]+'
      comment: Number
      scope: constant.numeric.endless-sky
    - match: ' '
      comment: Non-quoted string
      push: implicit_string
    - match: '( +)\w+'
      scope: entity.name.endless-sky
    - match: $
      comment: End of line
      pop: true
    - match: '.'
      scope: string.unquoted.endless-sky

  implicit_string:
    - meta_scope: string.unquoted.endless-sky
    - match: ' '
      pop: true
    - match: $
      pop: true

  string:
    - meta_scope: string.quoted.double.endless-sky
    - match: \\.
      scope: constant.character.escape.endless-sky
    - match: '"'
      pop: true

  bstring:
    - meta_scope: string.quoted.backtick.endless-sky
    - match: \\.
      scope: constant.character.escape.endless-sky
    - match: '`'
      pop: true

  comments:
    - match: '#'
      scope: punctuation.definition.comment.endless-sky
      push:
        - meta_scope: comment.line.number-sign.endless-sky
        - match: $\n?
          pop: true
